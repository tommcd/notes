[tox]
envlist = check-environment,bash-syntax,shellcheck,shfmt,hadolint,ruff,taplo,docs,pytest,quality
# check-environment runs FIRST to verify environment setup
# Note: tox continues on failure - run `tox -e check-environment` explicitly to verify setup
# Or run `./scripts/check-environment.sh` before running full tox
# Naming convention: <tool> = check, <tool>-fix = auto-fix/format
requires = tox-uv

[testenv]
# --- Global settings inherited by all environments ---
runner = uv-venv-runner
package = editable
dependency_groups = dev
setenv = PATH={envbindir}:{env:HOME}/.local/bin:{env:PATH}

[testenv:check-environment]
description = Verify development environment is ready (Python, uv, external tools)
package = skip
dependency_groups =
allowlist_externals = bash
commands = bash ./scripts/check-environment.sh

[testenv:check-tools]
description = Check external tool versions match pyproject.toml
package = skip
dependency_groups =
allowlist_externals = python3
commands = python3 scripts/check-tools.py

[testenv:setup-tools]
description = Install external tools from pyproject.toml
package = skip
dependency_groups =
allowlist_externals = python3
commands = python3 scripts/setup-external-tools.py

[testenv:clean-tools]
description = Uninstall plugin-managed external tools
package = skip
dependency_groups =
allowlist_externals = python3
commands = python3 scripts/clean-tools.py

[testenv:setup-environment]
description = Full development environment setup (installs uv, Python, tools, deps, hooks)
package = skip
dependency_groups =
allowlist_externals = bash
commands = bash ./scripts/setup-environment.sh

[testenv:clean-environment]
description = Clean all generated files and caches (reset to fresh clone state)
package = skip
dependency_groups =
allowlist_externals = bash
commands = bash ./scripts/clean-environment.sh

[testenv:show-tox-commands]
description = Display all tox environment commands in readable format
package = skip
dependency_groups =
allowlist_externals = python3
commands = python3 scripts/show-tox-commands.py

[testenv:sync-precommit-versions]
description = Sync external tool versions from pyproject.toml to pre-commit config
package = skip
dependency_groups =
allowlist_externals = python3
commands = python3 scripts/sync-precommit-versions.py

[testenv:validate-plugins]
description = Validate tool plugin Markdown files for completeness and correctness
package = skip
dependency_groups =
allowlist_externals = python3
commands = python3 scripts/validate-plugins.py

[testenv:bash-syntax]
description = Fast fail: Bash syntax validation for all .sh files
package = skip
dependency_groups =
allowlist_externals = bash,find
commands = bash -c 'find . -name "*.sh" -exec bash -n \{\} \;'

[testenv:shellcheck]
description = Bash linting with shellcheck
# NOTE: Comment out this environment if your project has no shell scripts
package = skip
dependency_groups =
allowlist_externals = shellcheck
commands = shellcheck --severity=error scripts/**/*.sh

[testenv:shfmt]
description = Bash formatting check (Google style)
# NOTE: Comment out this environment if your project has no shell scripts
package = skip
dependency_groups =
allowlist_externals = shfmt
commands = shfmt -d -i 2 -ci -bn scripts/**/*.sh

[testenv:shfmt-fix]
description = Auto-fix bash formatting (Google style)
# NOTE: Comment out this environment if your project has no shell scripts
package = skip
dependency_groups =
allowlist_externals = shfmt
commands = shfmt -w -i 2 -ci -bn scripts/**/*.sh

[testenv:hadolint]
description = Dockerfile linting with hadolint
# NOTE: Comment out this environment if your project has no Dockerfile
package = skip
dependency_groups =
allowlist_externals = hadolint
commands = hadolint Dockerfile

[testenv:ruff]
description = Python linting and formatting check with ruff
# Inherits runner, package, and dependency_groups
commands =
    ruff check tests/ src/ scripts/
    ruff format --check --diff tests/ src/ scripts/

[testenv:ruff-fix]
description = Auto-fix Python linting and formatting
commands =
    ruff check --fix tests/ src/  scripts/
    ruff format tests/ src/ scripts/

[testenv:docs-fix]
description = Auto-fix markdown formatting
package = skip
dependency_groups = dev
commands = mdformat *.md docs/**/*.md

[testenv:unit]
description = Run fast unit tests only
commands = pytest tests/unit/ -v

[testenv:e2e]
description = Run fast e2e tests (Python CLI only, skips slow bash tests)
commands = pytest tests/e2e/ -v -x

[testenv:e2e-all]
description = Run ALL e2e tests including slow bash script tests
commands = pytest tests/e2e/ -v -x -m 'slow or not slow'

[testenv:quality]
description = Run quality/meta tests (config consistency, Google Shell Style checks)
allowlist_externals = bash,shellcheck,shfmt
commands = pytest tests/quality/ -v --no-cov

[testenv:docs]
description = Documentation quality checks (lint, format, links)
package = skip
dependency_groups = dev
allowlist_externals = lychee,markdownlint-cli2
commands =
    markdownlint-cli2 *.md docs/**/*.md
    mdformat --check *.md docs/**/*.md
    lychee --no-progress --config .lychee.toml *.md docs/**/*.md

[testenv:pytest]
description = Run unit tests + fast e2e tests (default, skips slow tests)
commands = pytest tests/ -v -x

[testenv:pytest-all]
description = Run ALL tests (unit + e2e + quality + docs including slow tests)
commands = pytest tests/ -v -x -m 'slow or not slow'

# Optional production-parity job: runs against a built wheel
[testenv:pytest-wheel]
description = Run tests against wheel install for packaging parity
package = wheel
commands = pytest tests/ -v -x

[testenv:taplo]
description = TOML formatting and linting check
package = skip
dependency_groups =
allowlist_externals = bash,taplo
commands = bash -c 'taplo format --check *.toml'

[testenv:taplo-fix]
description = Auto-fix TOML formatting
package = skip
dependency_groups =
allowlist_externals = bash,taplo
commands = bash -c 'taplo format *.toml'

[testenv:docs-build]
description = Build MkDocs documentation site
package = skip # Override: Don't install the main project package
dependency_groups = docs # Override: Use the 'docs' dependency group instead
allowlist_externals = bash
commands = bash -c 'mkdocs build --strict'

[testenv:docs-serve]
description = Serve MkDocs documentation site locally (http://127.0.0.1:8000)
package = skip
dependency_groups = docs
allowlist_externals = bash
commands = bash -c 'mkdocs serve'

[testenv:docs-deploy]
description = Deploy documentation to GitHub Pages
package = skip
dependency_groups = docs
allowlist_externals = bash
commands = bash -c 'mkdocs gh-deploy --force'
